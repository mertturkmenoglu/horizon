// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuth = `-- name: CreateAuth :one
INSERT INTO auth (
  user_id,
  email,
  password_hash,
  google_id,
  is_email_verified,
  role
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING id, user_id, email, password_hash, google_id, is_email_verified, is_active, role, last_login, created_at, updated_at, password_reset_token, password_reset_expires, login_attempts, lockout_until
`

type CreateAuthParams struct {
	UserID          pgtype.UUID
	Email           string
	PasswordHash    pgtype.Text
	GoogleID        pgtype.Text
	IsEmailVerified pgtype.Bool
	Role            pgtype.Text
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (Auth, error) {
	row := q.db.QueryRow(ctx, createAuth,
		arg.UserID,
		arg.Email,
		arg.PasswordHash,
		arg.GoogleID,
		arg.IsEmailVerified,
		arg.Role,
	)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
	)
	return i, err
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio
`

type CreateAuthorParams struct {
	Name string
	Bio  pgtype.Text
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  full_name,
  username,
  profile_image
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, full_name, username, gender, profile_image
`

type CreateUserParams struct {
	FullName     string
	Username     string
	ProfileImage pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.FullName, arg.Username, arg.ProfileImage)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Gender,
		&i.ProfileImage,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthByEmail = `-- name: GetAuthByEmail :one
SELECT id, user_id, email, password_hash, google_id, is_email_verified, is_active, role, last_login, created_at, updated_at, password_reset_token, password_reset_expires, login_attempts, lockout_until FROM auth
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAuthByEmail(ctx context.Context, email string) (Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByEmail, email)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
	)
	return i, err
}

const getAuthByGoogleId = `-- name: GetAuthByGoogleId :one
SELECT id, user_id, email, password_hash, google_id, is_email_verified, is_active, role, last_login, created_at, updated_at, password_reset_token, password_reset_expires, login_attempts, lockout_until FROM auth
WHERE google_id = $1 LIMIT 1
`

func (q *Queries) GetAuthByGoogleId(ctx context.Context, googleID pgtype.Text) (Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByGoogleId, googleID)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
	)
	return i, err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, full_name, username, gender, profile_image FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Gender,
		&i.ProfileImage,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors
  set name = $2,
  bio = $3
WHERE id = $1
RETURNING id, name, bio
`

type UpdateAuthorParams struct {
	ID   int64
	Name string
	Bio  pgtype.Text
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, updateAuthor, arg.ID, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}
