// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuth = `-- name: CreateAuth :one
INSERT INTO auth (
  id,
  user_id,
  email,
  password_hash,
  google_id,
  is_email_verified,
  role
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7
)
RETURNING id, user_id, email, password_hash, google_id, is_email_verified, is_active, role, last_login, created_at, updated_at, password_reset_token, password_reset_expires, login_attempts, lockout_until
`

type CreateAuthParams struct {
	ID              string
	UserID          string
	Email           string
	PasswordHash    pgtype.Text
	GoogleID        pgtype.Text
	IsEmailVerified bool
	Role            string
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (Auth, error) {
	row := q.db.QueryRow(ctx, createAuth,
		arg.ID,
		arg.UserID,
		arg.Email,
		arg.PasswordHash,
		arg.GoogleID,
		arg.IsEmailVerified,
		arg.Role,
	)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id,
  full_name,
  username,
  profile_image
) VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id, full_name, username, gender, profile_image
`

type CreateUserParams struct {
	ID           string
	FullName     string
	Username     string
	ProfileImage pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.FullName,
		arg.Username,
		arg.ProfileImage,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Gender,
		&i.ProfileImage,
	)
	return i, err
}

const getAuthByEmail = `-- name: GetAuthByEmail :one
SELECT id, user_id, email, password_hash, google_id, is_email_verified, is_active, role, last_login, created_at, updated_at, password_reset_token, password_reset_expires, login_attempts, lockout_until FROM auth
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAuthByEmail(ctx context.Context, email string) (Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByEmail, email)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
	)
	return i, err
}

const getAuthByGoogleId = `-- name: GetAuthByGoogleId :one
SELECT id, user_id, email, password_hash, google_id, is_email_verified, is_active, role, last_login, created_at, updated_at, password_reset_token, password_reset_expires, login_attempts, lockout_until FROM auth
WHERE google_id = $1 LIMIT 1
`

func (q *Queries) GetAuthByGoogleId(ctx context.Context, googleID pgtype.Text) (Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByGoogleId, googleID)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
	)
	return i, err
}

const getAuthById = `-- name: GetAuthById :one
SELECT id, user_id, email, password_hash, google_id, is_email_verified, is_active, role, last_login, created_at, updated_at, password_reset_token, password_reset_expires, login_attempts, lockout_until FROM auth
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthById(ctx context.Context, id string) (Auth, error) {
	row := q.db.QueryRow(ctx, getAuthById, id)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.Role,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, full_name, username, gender, profile_image FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Gender,
		&i.ProfileImage,
	)
	return i, err
}
