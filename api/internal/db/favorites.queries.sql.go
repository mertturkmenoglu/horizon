// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: favorites.queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUserFavorites = `-- name: CountUserFavorites :one
SELECT COUNT(*) FROM favorites
WHERE user_id = $1
`

func (q *Queries) CountUserFavorites(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, countUserFavorites, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserFavoritesByUsername = `-- name: CountUserFavoritesByUsername :one
SELECT COUNT(*) FROM favorites
WHERE user_id = (SELECT id FROM users WHERE username = $1)
`

func (q *Queries) CountUserFavoritesByUsername(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, countUserFavoritesByUsername, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFavorite = `-- name: CreateFavorite :one
INSERT INTO favorites (
  user_id,
  hservice_id
) VALUES (
  $1,
  $2
)
RETURNING id, user_id, hservice_id, created_at
`

type CreateFavoriteParams struct {
	UserID     string
	HserviceID string
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) (Favorite, error) {
	row := q.db.QueryRow(ctx, createFavorite, arg.UserID, arg.HserviceID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.HserviceID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFavoriteByHServiceId = `-- name: DeleteFavoriteByHServiceId :exec
DELETE FROM favorites
WHERE hservice_id = $1 AND user_id = $2
`

type DeleteFavoriteByHServiceIdParams struct {
	HserviceID string
	UserID     string
}

func (q *Queries) DeleteFavoriteByHServiceId(ctx context.Context, arg DeleteFavoriteByHServiceIdParams) error {
	_, err := q.db.Exec(ctx, deleteFavoriteByHServiceId, arg.HserviceID, arg.UserID)
	return err
}

const getFavoriteById = `-- name: GetFavoriteById :one
SELECT favorites.id, favorites.user_id, favorites.hservice_id, favorites.created_at, hservices.id, hservices.user_id, hservices.title, hservices.slug, hservices.description, hservices.category, hservices.price, hservices.price_unit, hservices.price_timespan, hservices.is_online, hservices.url, hservices.location, hservices.delivery_time, hservices.delivery_timespan, hservices.total_points, hservices.total_votes, hservices.media, hservices.created_at, hservices.updated_at FROM favorites
JOIN hservices ON hservices.id = favorites.hservice_id
WHERE favorites.id = $1
`

type GetFavoriteByIdRow struct {
	Favorite Favorite
	Hservice Hservice
}

func (q *Queries) GetFavoriteById(ctx context.Context, id pgtype.UUID) (GetFavoriteByIdRow, error) {
	row := q.db.QueryRow(ctx, getFavoriteById, id)
	var i GetFavoriteByIdRow
	err := row.Scan(
		&i.Favorite.ID,
		&i.Favorite.UserID,
		&i.Favorite.HserviceID,
		&i.Favorite.CreatedAt,
		&i.Hservice.ID,
		&i.Hservice.UserID,
		&i.Hservice.Title,
		&i.Hservice.Slug,
		&i.Hservice.Description,
		&i.Hservice.Category,
		&i.Hservice.Price,
		&i.Hservice.PriceUnit,
		&i.Hservice.PriceTimespan,
		&i.Hservice.IsOnline,
		&i.Hservice.Url,
		&i.Hservice.Location,
		&i.Hservice.DeliveryTime,
		&i.Hservice.DeliveryTimespan,
		&i.Hservice.TotalPoints,
		&i.Hservice.TotalVotes,
		&i.Hservice.Media,
		&i.Hservice.CreatedAt,
		&i.Hservice.UpdatedAt,
	)
	return i, err
}

const getFavoritesByUserId = `-- name: GetFavoritesByUserId :many
SELECT favorites.id, favorites.user_id, favorites.hservice_id, favorites.created_at, hservices.id, hservices.user_id, hservices.title, hservices.slug, hservices.description, hservices.category, hservices.price, hservices.price_unit, hservices.price_timespan, hservices.is_online, hservices.url, hservices.location, hservices.delivery_time, hservices.delivery_timespan, hservices.total_points, hservices.total_votes, hservices.media, hservices.created_at, hservices.updated_at FROM favorites
JOIN hservices ON hservices.id = favorites.hservice_id
WHERE favorites.user_id = $1
ORDER BY favorites.created_at DESC
OFFSET $2
LIMIT $3
`

type GetFavoritesByUserIdParams struct {
	UserID string
	Offset int32
	Limit  int32
}

type GetFavoritesByUserIdRow struct {
	Favorite Favorite
	Hservice Hservice
}

func (q *Queries) GetFavoritesByUserId(ctx context.Context, arg GetFavoritesByUserIdParams) ([]GetFavoritesByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getFavoritesByUserId, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFavoritesByUserIdRow
	for rows.Next() {
		var i GetFavoritesByUserIdRow
		if err := rows.Scan(
			&i.Favorite.ID,
			&i.Favorite.UserID,
			&i.Favorite.HserviceID,
			&i.Favorite.CreatedAt,
			&i.Hservice.ID,
			&i.Hservice.UserID,
			&i.Hservice.Title,
			&i.Hservice.Slug,
			&i.Hservice.Description,
			&i.Hservice.Category,
			&i.Hservice.Price,
			&i.Hservice.PriceUnit,
			&i.Hservice.PriceTimespan,
			&i.Hservice.IsOnline,
			&i.Hservice.Url,
			&i.Hservice.Location,
			&i.Hservice.DeliveryTime,
			&i.Hservice.DeliveryTimespan,
			&i.Hservice.TotalPoints,
			&i.Hservice.TotalVotes,
			&i.Hservice.Media,
			&i.Hservice.CreatedAt,
			&i.Hservice.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavoritesByUsername = `-- name: GetFavoritesByUsername :many
SELECT favorites.id, favorites.user_id, favorites.hservice_id, favorites.created_at, hservices.id, hservices.user_id, hservices.title, hservices.slug, hservices.description, hservices.category, hservices.price, hservices.price_unit, hservices.price_timespan, hservices.is_online, hservices.url, hservices.location, hservices.delivery_time, hservices.delivery_timespan, hservices.total_points, hservices.total_votes, hservices.media, hservices.created_at, hservices.updated_at FROM favorites
JOIN hservices ON hservices.id = favorites.hservice_id
WHERE favorites.user_id = (SELECT id FROM users WHERE users.username = $1)
ORDER BY favorites.created_at DESC
OFFSET $2
LIMIT $3
`

type GetFavoritesByUsernameParams struct {
	Username string
	Offset   int32
	Limit    int32
}

type GetFavoritesByUsernameRow struct {
	Favorite Favorite
	Hservice Hservice
}

func (q *Queries) GetFavoritesByUsername(ctx context.Context, arg GetFavoritesByUsernameParams) ([]GetFavoritesByUsernameRow, error) {
	rows, err := q.db.Query(ctx, getFavoritesByUsername, arg.Username, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFavoritesByUsernameRow
	for rows.Next() {
		var i GetFavoritesByUsernameRow
		if err := rows.Scan(
			&i.Favorite.ID,
			&i.Favorite.UserID,
			&i.Favorite.HserviceID,
			&i.Favorite.CreatedAt,
			&i.Hservice.ID,
			&i.Hservice.UserID,
			&i.Hservice.Title,
			&i.Hservice.Slug,
			&i.Hservice.Description,
			&i.Hservice.Category,
			&i.Hservice.Price,
			&i.Hservice.PriceUnit,
			&i.Hservice.PriceTimespan,
			&i.Hservice.IsOnline,
			&i.Hservice.Url,
			&i.Hservice.Location,
			&i.Hservice.DeliveryTime,
			&i.Hservice.DeliveryTimespan,
			&i.Hservice.TotalPoints,
			&i.Hservice.TotalVotes,
			&i.Hservice.Media,
			&i.Hservice.CreatedAt,
			&i.Hservice.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isFavorite = `-- name: IsFavorite :one
SELECT id FROM favorites
WHERE hservice_id = $1 AND user_id = $2
`

type IsFavoriteParams struct {
	HserviceID string
	UserID     string
}

func (q *Queries) IsFavorite(ctx context.Context, arg IsFavoriteParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, isFavorite, arg.HserviceID, arg.UserID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
