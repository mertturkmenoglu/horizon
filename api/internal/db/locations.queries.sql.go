// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: locations.queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries (
  id,
  name,
  iso2,
  numeric_code,
  phone_code,
  capital,
  currency,
  currency_name,
  currency_symbol,
  tld,
  native,
  region,
  subregion,
  timezones,
  latitude,
  longitude
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13,
  $14,
  $15,
  $16
)
RETURNING id, name, iso2, numeric_code, phone_code, capital, currency, currency_name, currency_symbol, tld, native, region, subregion, timezones, latitude, longitude
`

type CreateCountryParams struct {
	ID             int32
	Name           string
	Iso2           string
	NumericCode    string
	PhoneCode      string
	Capital        string
	Currency       string
	CurrencyName   string
	CurrencySymbol string
	Tld            string
	Native         string
	Region         string
	Subregion      string
	Timezones      string
	Latitude       float64
	Longitude      float64
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (Country, error) {
	row := q.db.QueryRow(ctx, createCountry,
		arg.ID,
		arg.Name,
		arg.Iso2,
		arg.NumericCode,
		arg.PhoneCode,
		arg.Capital,
		arg.Currency,
		arg.CurrencyName,
		arg.CurrencySymbol,
		arg.Tld,
		arg.Native,
		arg.Region,
		arg.Subregion,
		arg.Timezones,
		arg.Latitude,
		arg.Longitude,
	)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Iso2,
		&i.NumericCode,
		&i.PhoneCode,
		&i.Capital,
		&i.Currency,
		&i.CurrencyName,
		&i.CurrencySymbol,
		&i.Tld,
		&i.Native,
		&i.Region,
		&i.Subregion,
		&i.Timezones,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const createState = `-- name: CreateState :one
INSERT INTO states (
  id,
  name,
  country_id,
  country_code,
  country_name,
  state_code,
  type,
  latitude,
  longitude
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9
)
RETURNING id, name, country_id, country_code, country_name, state_code, type, latitude, longitude
`

type CreateStateParams struct {
	ID          int32
	Name        string
	CountryID   int32
	CountryCode string
	CountryName string
	StateCode   string
	Type        pgtype.Text
	Latitude    float64
	Longitude   float64
}

func (q *Queries) CreateState(ctx context.Context, arg CreateStateParams) (State, error) {
	row := q.db.QueryRow(ctx, createState,
		arg.ID,
		arg.Name,
		arg.CountryID,
		arg.CountryCode,
		arg.CountryName,
		arg.StateCode,
		arg.Type,
		arg.Latitude,
		arg.Longitude,
	)
	var i State
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CountryID,
		&i.CountryCode,
		&i.CountryName,
		&i.StateCode,
		&i.Type,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}
