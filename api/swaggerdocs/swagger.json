{
    "swagger": "2.0",
    "info": {
        "description": "Horizon backend services",
        "title": "Horizon API",
        "termsOfService": "http://localhost:3000/terms",
        "contact": {
            "name": "Mert Turkmenoglu",
            "url": "https://mertturkmenoglu.com",
            "email": "gethorizonapp@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://mit-license.org/"
        },
        "version": "1.0"
    },
    "host": "localhost:5000",
    "basePath": "/api",
    "paths": {
        "/aggregations/home": {
            "get": {
                "description": "An endpoint to fetch multiple homepage queries",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aggregations"
                ],
                "summary": "Fetch multiple homepage entities in a single request",
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/aggregations.GetHomeAggregationsResponseDto"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/auth/credentials/login": {
            "post": {
                "description": "Logs in the user with email and password",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login with email and password",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/credentials/register": {
            "post": {
                "description": "Registers a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register with email and password",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Invalid email or username",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/forgot-password/reset": {
            "post": {
                "description": "Resets the password of the user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ResetPasswordRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid email or code",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/forgot-password/send": {
            "post": {
                "description": "Sends a forgot password email to the user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Send forgot password email",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SendForgotPasswordEmailRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid email",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/google": {
            "get": {
                "description": "Login with Google OAuth2",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login with Google OAuth2",
                "responses": {
                    "307": {
                        "description": "Temporary Redirect"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/google/callback": {
            "get": {
                "description": "Google OAuth2 callback",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Google OAuth2 callback",
                "responses": {
                    "307": {
                        "description": "Temporary Redirect"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logs out the current user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logs out the current user",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "description": "Gets the currently authenticated user or returns an error",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Gets the current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.GetMeResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/verify-email/send": {
            "post": {
                "description": "Sends a verification email to the user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Send verification email",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SendVerificationEmailRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid email or email already verified",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/verify-email/verify": {
            "get": {
                "description": "Verifies the email of the user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Verification code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid or expired verification code",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/bookmarks": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Gets all bookmarks for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookmarks"
                ],
                "summary": "Get bookmarks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/h.PaginatedResponse-array_bookmarks_BookmarksResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates a new bookmark with the given HService ID for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookmarks"
                ],
                "summary": "Create a new bookmark",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bookmarks.CreateBookmarkRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/h.Response-bookmarks_CreateBookmarkResponseDto"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/bookmarks/{hservice_id}": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Checks if a bookmark exists for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookmarks"
                ],
                "summary": "Check if a bookmark exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HService ID",
                        "name": "hservice_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/h.Response-bool"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes a bookmark with the given HService ID for the current user",
                "tags": [
                    "Bookmarks"
                ],
                "summary": "Delete a bookmark",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HService ID",
                        "name": "hservice_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/favorites": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Gets all favorites for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Favorites"
                ],
                "summary": "Get favorites",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/h.PaginatedResponse-array_favorites_FavoritesResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates a new favorite with the given HService ID for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Favorites"
                ],
                "summary": "Create a new favorite",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/favorites.CreateFavoriteRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/h.Response-favorites_CreateFavoriteResponseDto"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/favorites/username/{username}": {
            "get": {
                "description": "Gets all favorites for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Favorites"
                ],
                "summary": "Get favorites by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/h.PaginatedResponse-array_favorites_FavoritesResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/favorites/{hservice_id}": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Checks if a favorite exists for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Favorites"
                ],
                "summary": "Check if a favorite exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HService ID",
                        "name": "hservice_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/h.Response-bool"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes a favorite with the given HService ID for the current user",
                "tags": [
                    "Favorites"
                ],
                "summary": "Delete a favorite",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HService ID",
                        "name": "hservice_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/health/": {
            "get": {
                "description": "An endpoint to be used by load balancers to check the health of the service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/health.GetHealthResponseDto"
                        }
                    }
                }
            }
        },
        "/hservices": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Gets all hservices for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "HServices"
                ],
                "summary": "Get my hservices",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/h.PaginatedResponse-array_hservices_HServiceWithoutUserResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates a new hservice with the given title for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "HServices"
                ],
                "summary": "Create a new hservice",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/hservices.CreateHServiceRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/h.Response-hservices_HServiceWithoutUserResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/hservices/user/{username}": {
            "get": {
                "description": "Gets all hservices for the given username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "HServices"
                ],
                "summary": "Get hservices by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/h.PaginatedResponse-array_hservices_HServiceResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/hservices/{id}": {
            "get": {
                "description": "Gets a hservice with the given ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "HServices"
                ],
                "summary": "Get hservice by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HService ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/h.MetadataResponse-hservices_HServiceResponseDto-hservices_HServiceMetadataDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "aggregations.GetHomeAggregationsResponseDto": {
            "description": "Response for home aggregations",
            "type": "object",
            "properties": {
                "favorites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aggregations.HServiceResponseDto"
                    }
                },
                "featured": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aggregations.HServiceResponseDto"
                    }
                },
                "new": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aggregations.HServiceResponseDto"
                    }
                },
                "popular": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aggregations.HServiceResponseDto"
                    }
                }
            }
        },
        "aggregations.HServiceResponseDto": {
            "description": "Basic service information with user information",
            "type": "object",
            "properties": {
                "category": {
                    "type": "integer",
                    "example": 1
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "deliveryTime": {
                    "type": "integer",
                    "example": 1
                },
                "deliveryTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "description": {
                    "type": "string",
                    "example": "Example service description"
                },
                "id": {
                    "type": "string",
                    "example": "7234882566245847040"
                },
                "isOnline": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "type": "string",
                    "example": "Example Location"
                },
                "media": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "price": {
                    "type": "number",
                    "example": 10
                },
                "priceTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "priceUnit": {
                    "type": "string",
                    "example": "USD"
                },
                "slug": {
                    "type": "string",
                    "example": "example-service"
                },
                "title": {
                    "type": "string",
                    "example": "Example Service"
                },
                "totalPoints": {
                    "type": "integer",
                    "example": 50
                },
                "totalVotes": {
                    "type": "integer",
                    "example": 10
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "user": {
                    "$ref": "#/definitions/aggregations.UserResponseDto"
                },
                "userId": {
                    "type": "string",
                    "example": "528696135489945615"
                }
            }
        },
        "aggregations.UserResponseDto": {
            "description": "Basic user information",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "fullName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "id": {
                    "type": "string",
                    "example": "528696135489945615"
                },
                "profileImage": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "auth.GetMeResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "fullName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "googleId": {
                    "type": "string",
                    "example": "10887502189381205719451"
                },
                "id": {
                    "type": "string",
                    "example": "528696135489945615"
                },
                "isActive": {
                    "type": "boolean",
                    "example": true
                },
                "isEmailVerified": {
                    "type": "boolean",
                    "example": true
                },
                "lastLogin": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "profileImage": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "auth.LoginRequestDto": {
            "description": "Login request dto",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "password": {
                    "type": "string",
                    "format": "password",
                    "maxLength": 128,
                    "minLength": 6,
                    "example": "password123"
                }
            }
        },
        "auth.RegisterRequestDto": {
            "type": "object",
            "required": [
                "email",
                "fullName",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 3,
                    "example": "johndoe@example.com"
                },
                "fullName": {
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 3,
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "format": "password",
                    "maxLength": 128,
                    "minLength": 6,
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 4,
                    "example": "johndoe"
                }
            }
        },
        "auth.ResetPasswordRequestDto": {
            "type": "object",
            "required": [
                "code",
                "email",
                "newPassword"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "123456"
                },
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "newPassword": {
                    "type": "string",
                    "format": "password",
                    "maxLength": 128,
                    "minLength": 6,
                    "example": "password123"
                }
            }
        },
        "auth.SendForgotPasswordEmailRequestDto": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                }
            }
        },
        "auth.SendVerificationEmailRequestDto": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                }
            }
        },
        "bookmarks.BookmarksResponseDto": {
            "description": "Basic bookmark information",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "hservice": {
                    "$ref": "#/definitions/bookmarks.HServiceDto"
                },
                "hserviceId": {
                    "type": "string",
                    "example": "7235190573525635072"
                },
                "id": {
                    "type": "string",
                    "example": "7235190573525635072"
                },
                "userId": {
                    "type": "string",
                    "example": "528696135489945615"
                }
            }
        },
        "bookmarks.CreateBookmarkRequestDto": {
            "description": "CreateBookmarkRequestDto",
            "type": "object",
            "required": [
                "hserviceId"
            ],
            "properties": {
                "hserviceId": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 1,
                    "example": "7235190573525635072"
                }
            }
        },
        "bookmarks.CreateBookmarkResponseDto": {
            "description": "CreateBookmarkResponseDto",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "7235190573525635072"
                }
            }
        },
        "bookmarks.HServiceDto": {
            "description": "Basic service information without user information",
            "type": "object",
            "properties": {
                "category": {
                    "type": "integer",
                    "example": 1
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "deliveryTime": {
                    "type": "integer",
                    "example": 1
                },
                "deliveryTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "description": {
                    "type": "string",
                    "example": "Example service description"
                },
                "id": {
                    "type": "string",
                    "example": "7235190573525635072"
                },
                "isOnline": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "type": "string",
                    "example": "Example Location"
                },
                "media": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "price": {
                    "type": "number",
                    "example": 10
                },
                "priceTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "priceUnit": {
                    "type": "string",
                    "example": "USD"
                },
                "slug": {
                    "type": "string",
                    "example": "example-service"
                },
                "title": {
                    "type": "string",
                    "example": "Example Service"
                },
                "totalPoints": {
                    "type": "integer",
                    "example": 50
                },
                "totalVotes": {
                    "type": "integer",
                    "example": 10
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "userId": {
                    "type": "string",
                    "example": "528696135489945615"
                }
            }
        },
        "echo.HTTPError": {
            "type": "object",
            "properties": {
                "message": {}
            }
        },
        "favorites.CreateFavoriteRequestDto": {
            "description": "CreateFavoriteRequestDto",
            "type": "object",
            "required": [
                "hserviceId"
            ],
            "properties": {
                "hserviceId": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 1,
                    "example": "7235190573525635072"
                }
            }
        },
        "favorites.CreateFavoriteResponseDto": {
            "description": "CreateFavoriteResponseDto",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "7235190573525635072"
                }
            }
        },
        "favorites.FavoritesResponseDto": {
            "description": "Basic favorite information",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "hservice": {
                    "$ref": "#/definitions/favorites.HServiceDto"
                },
                "hserviceId": {
                    "type": "string",
                    "example": "7235190573525635072"
                },
                "id": {
                    "type": "string",
                    "example": "7235190573525635072"
                },
                "userId": {
                    "type": "string",
                    "example": "528696135489945615"
                }
            }
        },
        "favorites.HServiceDto": {
            "description": "Basic service information without user information",
            "type": "object",
            "properties": {
                "category": {
                    "type": "integer",
                    "example": 1
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "deliveryTime": {
                    "type": "integer",
                    "example": 1
                },
                "deliveryTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "description": {
                    "type": "string",
                    "example": "Example service description"
                },
                "id": {
                    "type": "string",
                    "example": "7235190573525635072"
                },
                "isOnline": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "type": "string",
                    "example": "Example Location"
                },
                "media": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "price": {
                    "type": "number",
                    "example": 10
                },
                "priceTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "priceUnit": {
                    "type": "string",
                    "example": "USD"
                },
                "slug": {
                    "type": "string",
                    "example": "example-service"
                },
                "title": {
                    "type": "string",
                    "example": "Example Service"
                },
                "totalPoints": {
                    "type": "integer",
                    "example": 50
                },
                "totalVotes": {
                    "type": "integer",
                    "example": 10
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "userId": {
                    "type": "string",
                    "example": "528696135489945615"
                }
            }
        },
        "h.MetadataResponse-hservices_HServiceResponseDto-hservices_HServiceMetadataDto": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/hservices.HServiceResponseDto"
                },
                "metadata": {
                    "$ref": "#/definitions/hservices.HServiceMetadataDto"
                }
            }
        },
        "h.PaginatedResponse-array_bookmarks_BookmarksResponseDto": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bookmarks.BookmarksResponseDto"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/pagination.Pagination"
                }
            }
        },
        "h.PaginatedResponse-array_favorites_FavoritesResponseDto": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/favorites.FavoritesResponseDto"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/pagination.Pagination"
                }
            }
        },
        "h.PaginatedResponse-array_hservices_HServiceResponseDto": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hservices.HServiceResponseDto"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/pagination.Pagination"
                }
            }
        },
        "h.PaginatedResponse-array_hservices_HServiceWithoutUserResponseDto": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hservices.HServiceWithoutUserResponseDto"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/pagination.Pagination"
                }
            }
        },
        "h.Response-bookmarks_CreateBookmarkResponseDto": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/bookmarks.CreateBookmarkResponseDto"
                }
            }
        },
        "h.Response-bool": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "boolean"
                }
            }
        },
        "h.Response-favorites_CreateFavoriteResponseDto": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/favorites.CreateFavoriteResponseDto"
                }
            }
        },
        "h.Response-hservices_HServiceWithoutUserResponseDto": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/hservices.HServiceWithoutUserResponseDto"
                }
            }
        },
        "health.GetHealthResponseDto": {
            "description": "GetHealthResponseDto",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "hservices.CreateHServiceRequestDto": {
            "description": "CreateHServiceRequestDto",
            "type": "object",
            "required": [
                "category",
                "deliveryTime",
                "deliveryTimespan",
                "description",
                "isOnline",
                "location",
                "price",
                "priceTimespan",
                "priceUnit",
                "title"
            ],
            "properties": {
                "category": {
                    "type": "integer",
                    "maximum": 32,
                    "minimum": 1,
                    "example": 1
                },
                "deliveryTime": {
                    "type": "integer",
                    "maximum": 32,
                    "minimum": 1,
                    "example": 1
                },
                "deliveryTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "minLength": 5,
                    "example": "Example service description"
                },
                "isOnline": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 1,
                    "example": "Example Location"
                },
                "media": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "maximum": 10000,
                    "minimum": 1,
                    "example": 10
                },
                "priceTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "priceUnit": {
                    "type": "string",
                    "example": "USD"
                },
                "title": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 5,
                    "example": "Example Service"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com"
                }
            }
        },
        "hservices.HServiceMetadataDto": {
            "description": "HServiceMetadataDto",
            "type": "object",
            "properties": {
                "isBookmarked": {
                    "type": "boolean",
                    "example": true
                },
                "isFavorite": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "hservices.HServiceResponseDto": {
            "description": "Basic service information with user information",
            "type": "object",
            "properties": {
                "category": {
                    "type": "integer",
                    "example": 1
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "deliveryTime": {
                    "type": "integer",
                    "example": 1
                },
                "deliveryTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "description": {
                    "type": "string",
                    "example": "Example service description"
                },
                "id": {
                    "type": "string",
                    "example": "7234882566245847040"
                },
                "isOnline": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "type": "string",
                    "example": "Example Location"
                },
                "media": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "price": {
                    "type": "number"
                },
                "priceTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "priceUnit": {
                    "type": "string",
                    "example": "USD"
                },
                "slug": {
                    "type": "string",
                    "example": "example-service"
                },
                "title": {
                    "type": "string",
                    "example": "Example Service"
                },
                "totalPoints": {
                    "type": "integer",
                    "example": 50
                },
                "totalVotes": {
                    "type": "integer",
                    "example": 10
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "user": {
                    "$ref": "#/definitions/hservices.UserResponseDto"
                },
                "userId": {
                    "type": "string",
                    "example": "528696135489945615"
                }
            }
        },
        "hservices.HServiceWithoutUserResponseDto": {
            "description": "Basic service information without user information",
            "type": "object",
            "properties": {
                "category": {
                    "type": "integer",
                    "example": 1
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "deliveryTime": {
                    "type": "integer",
                    "example": 1
                },
                "deliveryTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "description": {
                    "type": "string",
                    "example": "Example service description"
                },
                "id": {
                    "type": "string",
                    "example": "7234882566245847040"
                },
                "isOnline": {
                    "type": "boolean",
                    "example": true
                },
                "location": {
                    "type": "string",
                    "example": "Example Location"
                },
                "media": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "price": {
                    "type": "number",
                    "example": 10
                },
                "priceTimespan": {
                    "type": "string",
                    "example": "HOURLY"
                },
                "priceUnit": {
                    "type": "string",
                    "example": "USD"
                },
                "slug": {
                    "type": "string",
                    "example": "example-service"
                },
                "title": {
                    "type": "string",
                    "example": "Example Service"
                },
                "totalPoints": {
                    "type": "integer",
                    "example": 50
                },
                "totalVotes": {
                    "type": "integer",
                    "example": 10
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com"
                },
                "userId": {
                    "type": "string",
                    "example": "528696135489945615"
                }
            }
        },
        "hservices.UserResponseDto": {
            "description": "Basic user information",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-08-26T10:24:13.508676+03:00"
                },
                "fullName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "id": {
                    "type": "string",
                    "example": "528696135489945615"
                },
                "profileImage": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "pagination.Pagination": {
            "type": "object",
            "properties": {
                "hasNext": {
                    "type": "boolean"
                },
                "hasPrevious": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "CookieAuth": {
            "description": "Cookie based session authentication",
            "type": "apiKey",
            "name": "__horizon_auth",
            "in": "cookie"
        }
    }
}