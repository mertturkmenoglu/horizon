basePath: /api
definitions:
  aggregations.GetHomeAggregationsResponseDto:
    description: Response for home aggregations
    properties:
      favorites:
        items:
          $ref: '#/definitions/aggregations.HServiceResponseDto'
        type: array
      featured:
        items:
          $ref: '#/definitions/aggregations.HServiceResponseDto'
        type: array
      new:
        items:
          $ref: '#/definitions/aggregations.HServiceResponseDto'
        type: array
      popular:
        items:
          $ref: '#/definitions/aggregations.HServiceResponseDto'
        type: array
    type: object
  aggregations.HServiceResponseDto:
    description: Basic service information with user information
    properties:
      category:
        example: 1
        type: integer
      createdAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      deliveryTime:
        example: 1
        type: integer
      deliveryTimespan:
        example: HOURLY
        type: string
      description:
        example: Example service description
        type: string
      id:
        example: "7234882566245847040"
        type: string
      isOnline:
        example: true
        type: boolean
      location:
        example: Example Location
        type: string
      media:
        additionalProperties: {}
        type: object
      price:
        example: 10
        type: number
      priceTimespan:
        example: HOURLY
        type: string
      priceUnit:
        example: USD
        type: string
      slug:
        example: example-service
        type: string
      title:
        example: Example Service
        type: string
      totalPoints:
        example: 50
        type: integer
      totalVotes:
        example: 10
        type: integer
      updatedAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      url:
        example: https://example.com
        type: string
      user:
        $ref: '#/definitions/aggregations.UserResponseDto'
      userId:
        example: "528696135489945615"
        type: string
    type: object
  aggregations.UserResponseDto:
    description: Basic user information
    properties:
      createdAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      fullName:
        example: John Doe
        type: string
      gender:
        example: male
        type: string
      id:
        example: "528696135489945615"
        type: string
      profileImage:
        example: https://example.com/image.jpg
        type: string
      username:
        example: johndoe
        type: string
    type: object
  auth.GetMeResponseDto:
    properties:
      createdAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        format: date-time
        type: string
      email:
        example: johndoe@example.com
        type: string
      fullName:
        example: John Doe
        type: string
      gender:
        example: male
        type: string
      googleId:
        example: "10887502189381205719451"
        type: string
      id:
        example: "528696135489945615"
        type: string
      isActive:
        example: true
        type: boolean
      isEmailVerified:
        example: true
        type: boolean
      lastLogin:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      profileImage:
        example: https://example.com/image.jpg
        type: string
      role:
        example: user
        type: string
      updatedAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        format: date-time
        type: string
      username:
        example: johndoe
        type: string
    type: object
  auth.LoginRequestDto:
    description: Login request dto
    properties:
      email:
        example: johndoe@example.com
        type: string
      password:
        example: password123
        format: password
        maxLength: 128
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterRequestDto:
    properties:
      email:
        example: johndoe@example.com
        maxLength: 128
        minLength: 3
        type: string
      fullName:
        example: John Doe
        maxLength: 128
        minLength: 3
        type: string
      password:
        example: password123
        format: password
        maxLength: 128
        minLength: 6
        type: string
      username:
        example: johndoe
        maxLength: 32
        minLength: 4
        type: string
    required:
    - email
    - fullName
    - password
    - username
    type: object
  auth.ResetPasswordRequestDto:
    properties:
      code:
        example: "123456"
        type: string
      email:
        example: johndoe@example.com
        type: string
      newPassword:
        example: password123
        format: password
        maxLength: 128
        minLength: 6
        type: string
    required:
    - code
    - email
    - newPassword
    type: object
  auth.SendForgotPasswordEmailRequestDto:
    properties:
      email:
        example: johndoe@example.com
        type: string
    required:
    - email
    type: object
  auth.SendVerificationEmailRequestDto:
    properties:
      email:
        example: johndoe@example.com
        type: string
    required:
    - email
    type: object
  bookmarks.BookmarksResponseDto:
    description: Basic bookmark information
    properties:
      createdAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      hservice:
        $ref: '#/definitions/bookmarks.HServiceDto'
      hserviceId:
        example: "7235190573525635072"
        type: string
      id:
        example: "7235190573525635072"
        type: string
      userId:
        example: "528696135489945615"
        type: string
    type: object
  bookmarks.CreateBookmarkRequestDto:
    description: CreateBookmarkRequestDto
    properties:
      hserviceId:
        example: "7235190573525635072"
        maxLength: 64
        minLength: 1
        type: string
    required:
    - hserviceId
    type: object
  bookmarks.CreateBookmarkResponseDto:
    description: CreateBookmarkResponseDto
    properties:
      id:
        example: "7235190573525635072"
        type: string
    type: object
  bookmarks.HServiceDto:
    description: Basic service information without user information
    properties:
      category:
        example: 1
        type: integer
      createdAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      deliveryTime:
        example: 1
        type: integer
      deliveryTimespan:
        example: HOURLY
        type: string
      description:
        example: Example service description
        type: string
      id:
        example: "7235190573525635072"
        type: string
      isOnline:
        example: true
        type: boolean
      location:
        example: Example Location
        type: string
      media:
        additionalProperties: {}
        type: object
      price:
        example: 10
        type: number
      priceTimespan:
        example: HOURLY
        type: string
      priceUnit:
        example: USD
        type: string
      slug:
        example: example-service
        type: string
      title:
        example: Example Service
        type: string
      totalPoints:
        example: 50
        type: integer
      totalVotes:
        example: 10
        type: integer
      updatedAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      url:
        example: https://example.com
        type: string
      userId:
        example: "528696135489945615"
        type: string
    type: object
  echo.HTTPError:
    properties:
      message: {}
    type: object
  favorites.CreateFavoriteRequestDto:
    description: CreateFavoriteRequestDto
    properties:
      hserviceId:
        example: "7235190573525635072"
        maxLength: 64
        minLength: 1
        type: string
    required:
    - hserviceId
    type: object
  favorites.CreateFavoriteResponseDto:
    description: CreateFavoriteResponseDto
    properties:
      id:
        example: "7235190573525635072"
        type: string
    type: object
  favorites.FavoritesResponseDto:
    description: Basic favorite information
    properties:
      createdAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      hservice:
        $ref: '#/definitions/favorites.HServiceDto'
      hserviceId:
        example: "7235190573525635072"
        type: string
      id:
        example: "7235190573525635072"
        type: string
      userId:
        example: "528696135489945615"
        type: string
    type: object
  favorites.HServiceDto:
    description: Basic service information without user information
    properties:
      category:
        example: 1
        type: integer
      createdAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      deliveryTime:
        example: 1
        type: integer
      deliveryTimespan:
        example: HOURLY
        type: string
      description:
        example: Example service description
        type: string
      id:
        example: "7235190573525635072"
        type: string
      isOnline:
        example: true
        type: boolean
      location:
        example: Example Location
        type: string
      media:
        additionalProperties: {}
        type: object
      price:
        example: 10
        type: number
      priceTimespan:
        example: HOURLY
        type: string
      priceUnit:
        example: USD
        type: string
      slug:
        example: example-service
        type: string
      title:
        example: Example Service
        type: string
      totalPoints:
        example: 50
        type: integer
      totalVotes:
        example: 10
        type: integer
      updatedAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      url:
        example: https://example.com
        type: string
      userId:
        example: "528696135489945615"
        type: string
    type: object
  h.MetadataResponse-hservices_HServiceResponseDto-hservices_HServiceMetadataDto:
    properties:
      data:
        $ref: '#/definitions/hservices.HServiceResponseDto'
      metadata:
        $ref: '#/definitions/hservices.HServiceMetadataDto'
    type: object
  h.PaginatedResponse-array_bookmarks_BookmarksResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/bookmarks.BookmarksResponseDto'
        type: array
      pagination:
        $ref: '#/definitions/pagination.Pagination'
    type: object
  h.PaginatedResponse-array_favorites_FavoritesResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/favorites.FavoritesResponseDto'
        type: array
      pagination:
        $ref: '#/definitions/pagination.Pagination'
    type: object
  h.PaginatedResponse-array_hservices_HServiceResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/hservices.HServiceResponseDto'
        type: array
      pagination:
        $ref: '#/definitions/pagination.Pagination'
    type: object
  h.PaginatedResponse-array_hservices_HServiceWithoutUserResponseDto:
    properties:
      data:
        items:
          $ref: '#/definitions/hservices.HServiceWithoutUserResponseDto'
        type: array
      pagination:
        $ref: '#/definitions/pagination.Pagination'
    type: object
  h.Response-array_uploads_UploadObj:
    properties:
      data:
        items:
          $ref: '#/definitions/uploads.UploadObj'
        type: array
    type: object
  h.Response-bookmarks_CreateBookmarkResponseDto:
    properties:
      data:
        $ref: '#/definitions/bookmarks.CreateBookmarkResponseDto'
    type: object
  h.Response-bool:
    properties:
      data:
        type: boolean
    type: object
  h.Response-favorites_CreateFavoriteResponseDto:
    properties:
      data:
        $ref: '#/definitions/favorites.CreateFavoriteResponseDto'
    type: object
  h.Response-hservices_HServiceWithoutUserResponseDto:
    properties:
      data:
        $ref: '#/definitions/hservices.HServiceWithoutUserResponseDto'
    type: object
  health.GetHealthResponseDto:
    description: GetHealthResponseDto
    properties:
      message:
        type: string
    type: object
  hservices.CreateHServiceRequestDto:
    description: CreateHServiceRequestDto
    properties:
      category:
        example: 1
        maximum: 32
        minimum: 1
        type: integer
      deliveryTime:
        example: 1
        maximum: 32
        minimum: 1
        type: integer
      deliveryTimespan:
        example: HOURLY
        type: string
      description:
        example: Example service description
        maxLength: 4096
        minLength: 5
        type: string
      isOnline:
        example: true
        type: boolean
      location:
        example: Example Location
        maxLength: 256
        minLength: 1
        type: string
      media:
        type: string
      price:
        example: 10
        maximum: 10000
        minimum: 1
        type: number
      priceTimespan:
        example: HOURLY
        type: string
      priceUnit:
        example: USD
        type: string
      title:
        example: Example Service
        maxLength: 64
        minLength: 5
        type: string
      url:
        example: https://example.com
        type: string
    required:
    - category
    - deliveryTime
    - deliveryTimespan
    - description
    - isOnline
    - location
    - price
    - priceTimespan
    - priceUnit
    - title
    type: object
  hservices.HServiceMetadataDto:
    description: HServiceMetadataDto
    properties:
      isBookmarked:
        example: true
        type: boolean
      isFavorite:
        example: true
        type: boolean
    type: object
  hservices.HServiceResponseDto:
    description: Basic service information with user information
    properties:
      category:
        example: 1
        type: integer
      createdAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      deliveryTime:
        example: 1
        type: integer
      deliveryTimespan:
        example: HOURLY
        type: string
      description:
        example: Example service description
        type: string
      id:
        example: "7234882566245847040"
        type: string
      isOnline:
        example: true
        type: boolean
      location:
        example: Example Location
        type: string
      media:
        additionalProperties: {}
        type: object
      price:
        type: number
      priceTimespan:
        example: HOURLY
        type: string
      priceUnit:
        example: USD
        type: string
      slug:
        example: example-service
        type: string
      title:
        example: Example Service
        type: string
      totalPoints:
        example: 50
        type: integer
      totalVotes:
        example: 10
        type: integer
      updatedAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      url:
        example: https://example.com
        type: string
      user:
        $ref: '#/definitions/hservices.UserResponseDto'
      userId:
        example: "528696135489945615"
        type: string
    type: object
  hservices.HServiceWithoutUserResponseDto:
    description: Basic service information without user information
    properties:
      category:
        example: 1
        type: integer
      createdAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      deliveryTime:
        example: 1
        type: integer
      deliveryTimespan:
        example: HOURLY
        type: string
      description:
        example: Example service description
        type: string
      id:
        example: "7234882566245847040"
        type: string
      isOnline:
        example: true
        type: boolean
      location:
        example: Example Location
        type: string
      media:
        additionalProperties: {}
        type: object
      price:
        example: 10
        type: number
      priceTimespan:
        example: HOURLY
        type: string
      priceUnit:
        example: USD
        type: string
      slug:
        example: example-service
        type: string
      title:
        example: Example Service
        type: string
      totalPoints:
        example: 50
        type: integer
      totalVotes:
        example: 10
        type: integer
      updatedAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      url:
        example: https://example.com
        type: string
      userId:
        example: "528696135489945615"
        type: string
    type: object
  hservices.UserResponseDto:
    description: Basic user information
    properties:
      createdAt:
        example: "2024-08-26T10:24:13.508676+03:00"
        type: string
      fullName:
        example: John Doe
        type: string
      gender:
        example: male
        type: string
      id:
        example: "528696135489945615"
        type: string
      profileImage:
        example: https://example.com/image.jpg
        type: string
      username:
        example: johndoe
        type: string
    type: object
  pagination.Pagination:
    properties:
      hasNext:
        type: boolean
      hasPrevious:
        type: boolean
      page:
        type: integer
      pageSize:
        type: integer
      totalPages:
        type: integer
      totalRecords:
        type: integer
    type: object
  uploads.UploadObj:
    description: UploadObj
    properties:
      key:
        example: a690dd36-6a90-465f-81d5-bf0a03be084c
        type: string
      url:
        example: https://example.com/image.jpg
        type: string
    type: object
host: localhost:5000
info:
  contact:
    email: gethorizonapp@gmail.com
    name: Mert Turkmenoglu
    url: https://mertturkmenoglu.com
  description: Horizon backend services
  license:
    name: MIT
    url: https://mit-license.org/
  termsOfService: http://localhost:3000/terms
  title: Horizon API
  version: "1.0"
paths:
  /aggregations/home:
    get:
      consumes:
      - application/json
      description: An endpoint to fetch multiple homepage queries
      produces:
      - application/json
      responses:
        "200":
          description: Successful request
          schema:
            $ref: '#/definitions/aggregations.GetHomeAggregationsResponseDto'
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetch multiple homepage entities in a single request
      tags:
      - Aggregations
  /auth/credentials/login:
    post:
      consumes:
      - application/json
      description: Logs in the user with email and password
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequestDto'
      responses:
        "200":
          description: OK
        "400":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Login with email and password
      tags:
      - Auth
  /auth/credentials/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with email and password
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequestDto'
      responses:
        "201":
          description: Created
        "400":
          description: Invalid email or username
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Register with email and password
      tags:
      - Auth
  /auth/forgot-password/reset:
    post:
      consumes:
      - application/json
      description: Resets the password of the user
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequestDto'
      responses:
        "200":
          description: OK
        "400":
          description: Invalid email or code
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Reset password
      tags:
      - Auth
  /auth/forgot-password/send:
    post:
      consumes:
      - application/json
      description: Sends a forgot password email to the user
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.SendForgotPasswordEmailRequestDto'
      responses:
        "200":
          description: OK
        "400":
          description: Invalid email
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Send forgot password email
      tags:
      - Auth
  /auth/google:
    get:
      consumes:
      - application/json
      description: Login with Google OAuth2
      responses:
        "307":
          description: Temporary Redirect
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Login with Google OAuth2
      tags:
      - Auth
  /auth/google/callback:
    get:
      consumes:
      - application/json
      description: Google OAuth2 callback
      responses:
        "307":
          description: Temporary Redirect
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Google OAuth2 callback
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the current user
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Logs out the current user
      tags:
      - Auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Gets the currently authenticated user or returns an error
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.GetMeResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Gets the current user
      tags:
      - Auth
  /auth/verify-email/send:
    post:
      consumes:
      - application/json
      description: Sends a verification email to the user
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.SendVerificationEmailRequestDto'
      responses:
        "200":
          description: OK
        "400":
          description: Invalid email or email already verified
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Send verification email
      tags:
      - Auth
  /auth/verify-email/verify:
    get:
      consumes:
      - application/json
      description: Verifies the email of the user
      parameters:
      - description: Verification code
        in: query
        name: code
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Invalid or expired verification code
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Verify email
      tags:
      - Auth
  /bookmarks:
    get:
      consumes:
      - application/json
      description: Gets all bookmarks for the current user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful request
          schema:
            $ref: '#/definitions/h.PaginatedResponse-array_bookmarks_BookmarksResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - CookieAuth: []
      summary: Get bookmarks
      tags:
      - Bookmarks
    post:
      consumes:
      - application/json
      description: Creates a new bookmark with the given HService ID for the current
        user
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/bookmarks.CreateBookmarkRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Successful request
          schema:
            $ref: '#/definitions/h.Response-bookmarks_CreateBookmarkResponseDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - CookieAuth: []
      summary: Create a new bookmark
      tags:
      - Bookmarks
  /bookmarks/{hservice_id}:
    delete:
      description: Deletes a bookmark with the given HService ID for the current user
      parameters:
      - description: HService ID
        in: path
        name: hservice_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - CookieAuth: []
      summary: Delete a bookmark
      tags:
      - Bookmarks
    get:
      consumes:
      - application/json
      description: Checks if a bookmark exists for the current user
      parameters:
      - description: HService ID
        in: path
        name: hservice_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful request
          schema:
            $ref: '#/definitions/h.Response-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - CookieAuth: []
      summary: Check if a bookmark exists
      tags:
      - Bookmarks
  /favorites:
    get:
      consumes:
      - application/json
      description: Gets all favorites for the current user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful request
          schema:
            $ref: '#/definitions/h.PaginatedResponse-array_favorites_FavoritesResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - CookieAuth: []
      summary: Get favorites
      tags:
      - Favorites
    post:
      consumes:
      - application/json
      description: Creates a new favorite with the given HService ID for the current
        user
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/favorites.CreateFavoriteRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Successful request
          schema:
            $ref: '#/definitions/h.Response-favorites_CreateFavoriteResponseDto'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - CookieAuth: []
      summary: Create a new favorite
      tags:
      - Favorites
  /favorites/{hservice_id}:
    delete:
      description: Deletes a favorite with the given HService ID for the current user
      parameters:
      - description: HService ID
        in: path
        name: hservice_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - CookieAuth: []
      summary: Delete a favorite
      tags:
      - Favorites
    get:
      consumes:
      - application/json
      description: Checks if a favorite exists for the current user
      parameters:
      - description: HService ID
        in: path
        name: hservice_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful request
          schema:
            $ref: '#/definitions/h.Response-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - CookieAuth: []
      summary: Check if a favorite exists
      tags:
      - Favorites
  /favorites/username/{username}:
    get:
      consumes:
      - application/json
      description: Gets all favorites for the current user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful request
          schema:
            $ref: '#/definitions/h.PaginatedResponse-array_favorites_FavoritesResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get favorites by username
      tags:
      - Favorites
  /health/:
    get:
      consumes:
      - application/json
      description: An endpoint to be used by load balancers to check the health of
        the service.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/health.GetHealthResponseDto'
      summary: Health Check
      tags:
      - Health
  /hservices:
    get:
      consumes:
      - application/json
      description: Gets all hservices for the current user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful request
          schema:
            $ref: '#/definitions/h.PaginatedResponse-array_hservices_HServiceWithoutUserResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - CookieAuth: []
      summary: Get my hservices
      tags:
      - HServices
    post:
      consumes:
      - application/json
      description: Creates a new hservice with the given title for the current user
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/hservices.CreateHServiceRequestDto'
      produces:
      - application/json
      responses:
        "201":
          description: Successful request
          schema:
            $ref: '#/definitions/h.Response-hservices_HServiceWithoutUserResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - CookieAuth: []
      summary: Create a new hservice
      tags:
      - HServices
  /hservices/{id}:
    get:
      consumes:
      - application/json
      description: Gets a hservice with the given ID
      parameters:
      - description: HService ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful request
          schema:
            $ref: '#/definitions/h.MetadataResponse-hservices_HServiceResponseDto-hservices_HServiceMetadataDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get hservice by ID
      tags:
      - HServices
  /hservices/user/{username}:
    get:
      consumes:
      - application/json
      description: Gets all hservices for the given username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful request
          schema:
            $ref: '#/definitions/h.PaginatedResponse-array_hservices_HServiceResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get hservices by username
      tags:
      - HServices
  /uploads/new-url:
    get:
      consumes:
      - application/json
      description: Gets a new upload URL for the given type
      parameters:
      - description: Type of upload
        in: query
        name: type
        required: true
        type: string
      - description: Number of files to be uploaded
        in: query
        maximum: 5
        minimum: 1
        name: count
        required: true
        type: integer
      - description: Mime type of the files to be uploaded
        in: query
        name: mime
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful request
          schema:
            $ref: '#/definitions/h.Response-array_uploads_UploadObj'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get new upload URL
      tags:
      - Uploads
securityDefinitions:
  CookieAuth:
    description: Cookie based session authentication
    in: cookie
    name: __horizon_auth
    type: apiKey
swagger: "2.0"
