// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { GetAggregationsHomeError, GetAggregationsHomeResponse, PostAuthCredentialsLoginData, PostAuthCredentialsLoginError, PostAuthCredentialsLoginResponse, PostAuthCredentialsRegisterData, PostAuthCredentialsRegisterError, PostAuthCredentialsRegisterResponse, PostAuthForgotPasswordResetData, PostAuthForgotPasswordResetError, PostAuthForgotPasswordResetResponse, PostAuthForgotPasswordSendData, PostAuthForgotPasswordSendError, PostAuthForgotPasswordSendResponse, PostAuthLogoutError, PostAuthLogoutResponse, GetAuthMeError, GetAuthMeResponse, PostAuthVerifyEmailSendData, PostAuthVerifyEmailSendError, PostAuthVerifyEmailSendResponse, GetAuthVerifyEmailVerifyData, GetAuthVerifyEmailVerifyError, GetAuthVerifyEmailVerifyResponse, GetBookmarksData, GetBookmarksError, GetBookmarksResponse, PostBookmarksData, PostBookmarksError, PostBookmarksResponse, GetBookmarksByHserviceIdData, GetBookmarksByHserviceIdError, GetBookmarksByHserviceIdResponse, DeleteBookmarksByHserviceIdData, DeleteBookmarksByHserviceIdError, DeleteBookmarksByHserviceIdResponse, GetFavoritesData, GetFavoritesError, GetFavoritesResponse, PostFavoritesData, PostFavoritesError, PostFavoritesResponse, GetFavoritesUsernameByUsernameData, GetFavoritesUsernameByUsernameError, GetFavoritesUsernameByUsernameResponse, GetFavoritesByHserviceIdData, GetFavoritesByHserviceIdError, GetFavoritesByHserviceIdResponse, DeleteFavoritesByHserviceIdData, DeleteFavoritesByHserviceIdError, DeleteFavoritesByHserviceIdResponse, GetHealthError, GetHealthResponse, GetHservicesData, GetHservicesError, GetHservicesResponse, PostHservicesData, PostHservicesError, PostHservicesResponse, GetHservicesUserByUsernameData, GetHservicesUserByUsernameError, GetHservicesUserByUsernameResponse, GetHservicesByIdData, GetHservicesByIdError, GetHservicesByIdResponse, GetUploadsNewUrlData, GetUploadsNewUrlError, GetUploadsNewUrlResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Fetch multiple homepage entities in a single request
 * An endpoint to fetch multiple homepage queries
 */
export const getAggregationsHome = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAggregationsHomeResponse, GetAggregationsHomeError, ThrowOnError>({
    ...options,
    url: '/aggregations/home'
}); };

/**
 * Login with email and password
 * Logs in the user with email and password
 */
export const postAuthCredentialsLogin = <ThrowOnError extends boolean = false>(options: Options<PostAuthCredentialsLoginData, ThrowOnError>) => { return (options?.client ?? client).post<PostAuthCredentialsLoginResponse, PostAuthCredentialsLoginError, ThrowOnError>({
    ...options,
    url: '/auth/credentials/login'
}); };

/**
 * Register with email and password
 * Registers a new user with email and password
 */
export const postAuthCredentialsRegister = <ThrowOnError extends boolean = false>(options: Options<PostAuthCredentialsRegisterData, ThrowOnError>) => { return (options?.client ?? client).post<PostAuthCredentialsRegisterResponse, PostAuthCredentialsRegisterError, ThrowOnError>({
    ...options,
    url: '/auth/credentials/register'
}); };

/**
 * Reset password
 * Resets the password of the user
 */
export const postAuthForgotPasswordReset = <ThrowOnError extends boolean = false>(options: Options<PostAuthForgotPasswordResetData, ThrowOnError>) => { return (options?.client ?? client).post<PostAuthForgotPasswordResetResponse, PostAuthForgotPasswordResetError, ThrowOnError>({
    ...options,
    url: '/auth/forgot-password/reset'
}); };

/**
 * Send forgot password email
 * Sends a forgot password email to the user
 */
export const postAuthForgotPasswordSend = <ThrowOnError extends boolean = false>(options: Options<PostAuthForgotPasswordSendData, ThrowOnError>) => { return (options?.client ?? client).post<PostAuthForgotPasswordSendResponse, PostAuthForgotPasswordSendError, ThrowOnError>({
    ...options,
    url: '/auth/forgot-password/send'
}); };

/**
 * Login with Google OAuth2
 * Login with Google OAuth2
 */
export const getAuthGoogle = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<void, unknown, ThrowOnError>({
    ...options,
    url: '/auth/google'
}); };

/**
 * Google OAuth2 callback
 * Google OAuth2 callback
 */
export const getAuthGoogleCallback = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<void, unknown, ThrowOnError>({
    ...options,
    url: '/auth/google/callback'
}); };

/**
 * Logs out the current user
 * Logs out the current user
 */
export const postAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<PostAuthLogoutResponse, PostAuthLogoutError, ThrowOnError>({
    ...options,
    url: '/auth/logout'
}); };

/**
 * Gets the current user
 * Gets the currently authenticated user or returns an error
 */
export const getAuthMe = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAuthMeResponse, GetAuthMeError, ThrowOnError>({
    ...options,
    url: '/auth/me'
}); };

/**
 * Send verification email
 * Sends a verification email to the user
 */
export const postAuthVerifyEmailSend = <ThrowOnError extends boolean = false>(options: Options<PostAuthVerifyEmailSendData, ThrowOnError>) => { return (options?.client ?? client).post<PostAuthVerifyEmailSendResponse, PostAuthVerifyEmailSendError, ThrowOnError>({
    ...options,
    url: '/auth/verify-email/send'
}); };

/**
 * Verify email
 * Verifies the email of the user
 */
export const getAuthVerifyEmailVerify = <ThrowOnError extends boolean = false>(options: Options<GetAuthVerifyEmailVerifyData, ThrowOnError>) => { return (options?.client ?? client).get<GetAuthVerifyEmailVerifyResponse, GetAuthVerifyEmailVerifyError, ThrowOnError>({
    ...options,
    url: '/auth/verify-email/verify'
}); };

/**
 * Get bookmarks
 * Gets all bookmarks for the current user
 */
export const getBookmarks = <ThrowOnError extends boolean = false>(options?: Options<GetBookmarksData, ThrowOnError>) => { return (options?.client ?? client).get<GetBookmarksResponse, GetBookmarksError, ThrowOnError>({
    ...options,
    url: '/bookmarks'
}); };

/**
 * Create a new bookmark
 * Creates a new bookmark with the given HService ID for the current user
 */
export const postBookmarks = <ThrowOnError extends boolean = false>(options: Options<PostBookmarksData, ThrowOnError>) => { return (options?.client ?? client).post<PostBookmarksResponse, PostBookmarksError, ThrowOnError>({
    ...options,
    url: '/bookmarks'
}); };

/**
 * Check if a bookmark exists
 * Checks if a bookmark exists for the current user
 */
export const getBookmarksByHserviceId = <ThrowOnError extends boolean = false>(options: Options<GetBookmarksByHserviceIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetBookmarksByHserviceIdResponse, GetBookmarksByHserviceIdError, ThrowOnError>({
    ...options,
    url: '/bookmarks/{hservice_id}'
}); };

/**
 * Delete a bookmark
 * Deletes a bookmark with the given HService ID for the current user
 */
export const deleteBookmarksByHserviceId = <ThrowOnError extends boolean = false>(options: Options<DeleteBookmarksByHserviceIdData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteBookmarksByHserviceIdResponse, DeleteBookmarksByHserviceIdError, ThrowOnError>({
    ...options,
    url: '/bookmarks/{hservice_id}'
}); };

/**
 * Get favorites
 * Gets all favorites for the current user
 */
export const getFavorites = <ThrowOnError extends boolean = false>(options?: Options<GetFavoritesData, ThrowOnError>) => { return (options?.client ?? client).get<GetFavoritesResponse, GetFavoritesError, ThrowOnError>({
    ...options,
    url: '/favorites'
}); };

/**
 * Create a new favorite
 * Creates a new favorite with the given HService ID for the current user
 */
export const postFavorites = <ThrowOnError extends boolean = false>(options: Options<PostFavoritesData, ThrowOnError>) => { return (options?.client ?? client).post<PostFavoritesResponse, PostFavoritesError, ThrowOnError>({
    ...options,
    url: '/favorites'
}); };

/**
 * Get favorites by username
 * Gets all favorites for the current user
 */
export const getFavoritesUsernameByUsername = <ThrowOnError extends boolean = false>(options: Options<GetFavoritesUsernameByUsernameData, ThrowOnError>) => { return (options?.client ?? client).get<GetFavoritesUsernameByUsernameResponse, GetFavoritesUsernameByUsernameError, ThrowOnError>({
    ...options,
    url: '/favorites/username/{username}'
}); };

/**
 * Check if a favorite exists
 * Checks if a favorite exists for the current user
 */
export const getFavoritesByHserviceId = <ThrowOnError extends boolean = false>(options: Options<GetFavoritesByHserviceIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetFavoritesByHserviceIdResponse, GetFavoritesByHserviceIdError, ThrowOnError>({
    ...options,
    url: '/favorites/{hservice_id}'
}); };

/**
 * Delete a favorite
 * Deletes a favorite with the given HService ID for the current user
 */
export const deleteFavoritesByHserviceId = <ThrowOnError extends boolean = false>(options: Options<DeleteFavoritesByHserviceIdData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteFavoritesByHserviceIdResponse, DeleteFavoritesByHserviceIdError, ThrowOnError>({
    ...options,
    url: '/favorites/{hservice_id}'
}); };

/**
 * Health Check
 * An endpoint to be used by load balancers to check the health of the service.
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetHealthResponse, GetHealthError, ThrowOnError>({
    ...options,
    url: '/health/'
}); };

/**
 * Get my hservices
 * Gets all hservices for the current user
 */
export const getHservices = <ThrowOnError extends boolean = false>(options?: Options<GetHservicesData, ThrowOnError>) => { return (options?.client ?? client).get<GetHservicesResponse, GetHservicesError, ThrowOnError>({
    ...options,
    url: '/hservices'
}); };

/**
 * Create a new hservice
 * Creates a new hservice with the given title for the current user
 */
export const postHservices = <ThrowOnError extends boolean = false>(options: Options<PostHservicesData, ThrowOnError>) => { return (options?.client ?? client).post<PostHservicesResponse, PostHservicesError, ThrowOnError>({
    ...options,
    url: '/hservices'
}); };

/**
 * Get hservices by username
 * Gets all hservices for the given username
 */
export const getHservicesUserByUsername = <ThrowOnError extends boolean = false>(options: Options<GetHservicesUserByUsernameData, ThrowOnError>) => { return (options?.client ?? client).get<GetHservicesUserByUsernameResponse, GetHservicesUserByUsernameError, ThrowOnError>({
    ...options,
    url: '/hservices/user/{username}'
}); };

/**
 * Get hservice by ID
 * Gets a hservice with the given ID
 */
export const getHservicesById = <ThrowOnError extends boolean = false>(options: Options<GetHservicesByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetHservicesByIdResponse, GetHservicesByIdError, ThrowOnError>({
    ...options,
    url: '/hservices/{id}'
}); };

/**
 * Get new upload URL
 * Gets a new upload URL for the given type
 */
export const getUploadsNewUrl = <ThrowOnError extends boolean = false>(options: Options<GetUploadsNewUrlData, ThrowOnError>) => { return (options?.client ?? client).get<GetUploadsNewUrlResponse, GetUploadsNewUrlError, ThrowOnError>({
    ...options,
    url: '/uploads/new-url'
}); };